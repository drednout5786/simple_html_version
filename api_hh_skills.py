# PRO:
# Составить список релевантных навыков по вакансиям Python-разработчик. Алгоритм решения примерно следующий:
# 1) получаем список вакансий;
# 2) очищаем тексты описания вакансий и требования вакансий;
# 3) составляем список релевантных навыков (python, django, sql и т.д.);
# 4) считаем частоту появления ключевых слов в текстах вакансий;
# 5) выводим ТОП-10 навыков и процент их встречаемости пользователю.
# Желательно сделать сервис универсальным относительно запросов и списка навыков. Проверить для других запросов вакансий и навыков.
import requests
import string
import pymorphy2

def parsing_skills(city, vacancy):
    # Проверенные варианты поиска вакансий, для которых работает программа: Python, разработчик, php, mysql, javascript,
    # postgresql, c++, маркетолог, продажник, менеджер
    data_whole = []
    data_txt = ""
    url = 'https://api.hh.ru/vacancies'
    for page in range(10): # Выгрузим 200 страниц вакансий
        params = {'text': 'NAME:' + vacancy + ' AND ' + city, 'per_page':'10', 'page':page}
        # params = {'text': 'Python', 'area':'1','per_page':'10', 'page':page} # Python
        result = requests.get(url, params=params)
        result_json = result.json()
        data_whole.append(result_json)

    n = 0 # Количество просмотренных вакансий, в которых есть инфа о требованиях
    for item in data_whole: # Перебираем вакансии в выгрузке
        data = item['items']
        # pprint.pprint(data)
        for record in data: # Перебираем вакансии
            if record['snippet'] != None: # Есть ли инфа по requirement
                data_snippet = record['snippet']
                k = 0
                if data_snippet['requirement'] != None:
                    data_txt += data_snippet['requirement']
                    k = 1
                if data_snippet['responsibility'] != None:
                    data_txt += data_snippet['responsibility']
                    k = 1
                n += k
    # print("Количество просмотренных вакансий, в которых есть инфа о требованиях = ", n)

    # очистить текст c требованиями по вакансиям от знаков препинания и вставки "highlighttext". Убираем лишние пробелы
    for i in string.punctuation:
        data_txt = data_txt.replace(i, " ")
    data_txt = data_txt.replace('highlighttext', "")
    data_txt = data_txt.replace('   ', " ")
    data_txt = data_txt.replace('  ', " ")

    # Сформировать list со словами
    txt_split = data_txt.split()

    # привести все слова к нижнему регистру
    txt_map = list(map(lambda x:x.lower(), txt_split))

    morph = pymorphy2.MorphAnalyzer()
    words = []
    for i in txt_map:
        words.append(morph.parse(i)[0].normal_form)

    stop = ['опыт', 'разработка', 'и', 'на', 'знание', 'с', 'работа', 'год', 'от', 'поддержка', 'хороший', 'по',
           'проект', 'приложение', 'уверенный', 'в', 'новое', 'разрабатывать', 'написание', 'не', 'уровень','1', '2', '3',
            '4', '5', '6', '7', '8', '9', '10', '11', 'коммерческий', 'функционал', 'существующий', 'сопровождение', 'реляционный',
            'отдел', 'продукт', 'система', 'для', 'внутренний', 'база', 'дать', 'язык', 'анализ', 'программирование',
            'тестирование', 'модель', 'сервис', 'или', 'решение', 'задача', 'c', 'участие', 'алгоритм', 'понимание', 'умение',
            'навык', 'владение', 'код', 'построение', 'and', 'технический', 'автоматизация', 'использование', 'тест', 'обработка',
            'of', 'создание', 'из', 'обучение', 'высокий', 'бизнес', 'развитие', 'процесс', 'быть', 'проектирование', 'команда',
            'работать', 'один', 'компания', 'машинный', 'математический', 'образование', 'принцип', 'аналитический', 'базовый',
            'оптимизация', 'основа', 'архитектура', 'писать', 'программный', 'технология', 'обеспечение', 'проведение', 'новый',
            'отличный', 'библиотека', 'скрипт', 'различный', 'плюс', 'клиент', 'пользователь', 'х', 'администрирование', 'как',
            'experience', 'in', 'реализация', 'инструмент', 'другой', 'управление', 'они', 'к', 'область', 'платформа', 'сбор',
            'подготовка', 'подготовка', 'требование', 'data', 'интеграция', 'инфраструктура', 'поиск',
            'документация', 'качество', 'to', 'желательно', 'мониторинг', 'контроль', 'доработка', 'использовать', 'разработчик',
            'больший', 'основный', 'внедрение', 'метод', 'взаимодействие', 'a', 'желание', 'применение', 'with', 'мы', 'серверный',
            'настройка', 'аналитик', '–', 'оценка', 'тестовый', 'стек', 'под', 'часть', 'внешний', 'скриптовый', 'наш', 'структура',
            'функциональный', 'современный', 'knowledge', 'приветствоваться', 'запрос', 'модуль', 'желательный', 'большой',
            'протокол', 'у', 'end', 'о', 'помощь', 'есть', 'прикладной', 'любой', 'например',
            'компонент', 'а', 'интерфейс', 'сайт', 'эффективность', 'участвовать', 'весь', 'статистический', 'промышленный',
            'наличие', 'руководство', 'число', 'гипотеза', 'фреймворка', 'фреймворок',
            'сложный', 'тот', 'версия', 'for', 'источник', 'моделирование', 'исследование', 'проверка', 'практический', 'автоматизированный',
            'текущий', 'уметь', 'сетевой', 'результат', 'преимущество', 'высоконагруженный', 'the', 'иметь', 'том', 'сеть', 'заказчик',
            'отчёт', 'формирование', '—', 'организация', 'улучшение', 'разбираться', 'что', 'цикл', 'асинхронный', 'он', 'мобильный',
            'методика', 'далее', 'среда', 'распределенный', 'информационный', 'поведение', 'выявление', 'выполнение', 'it',
            'science', 'анализировать', 'хотя', 'интеграционный', 'средство', 'др', 'бы', 'поддерживать', 'нагрузочный', 'основной',
            'клиентский', 'обязательно', 'полный', 'менее', 'сборка', 'теория', 'знакомство', 'skills', 'проводить', 'свой', 'is',
            'планирование', 'паттерн', 'классический', 'ошибка', 'понимать', 'документирование', 'ручной', 'чтение', 'до', 'интернет',
            'программа', 'системный', 'развёртывание', 'программировать', 'при', 'обязательный', 'дизайн', 'ведение', 'минимум',
            'проблема', 'архитектурный', 'решать', 'план', 'необходимый', 'пакет', 'информация', 'банка', 'ci', 'рефакторинг',
            'распознавание', 'показатель', 'продуктовый', 'знаете', 'микросервис', 'который']
    new_words = [word for word in words if word not in stop]

    # Получить из list dict, ключами которого являются слова, а значениями их количество появлений в тексте
    dict=set(new_words)
    dict_whole = {}
    for element in dict:
        dict_whole[element]=words.count(element)

    if len(dict) == 0:
        skills_list = []
    else:
        # Вывести 10 наиболее часто встречающихся слов, вывести количество разных слов в тексте;
        list_d=list(dict_whole.items())
        list_d.sort(key=lambda i:i[1], reverse=True)
        # print("10 наиболее часто встречающихся слов: ", list_d[:10])
        # print("10 наиболее часто встречающихся слов, частотность употребления, процент их встречаемости:")
        #
        # for k in range(10):
        #     print(list_d[k], round(list_d[k][1]/n*100, 2), "%")

        skills_list = []
        for k in range(10):
            skills_list.append(list_d[k][0])

    return skills_list

# print(round(parsing_skills('Ижевск', 'Python'),2))
# print(parsing_skills('Ижевск', 'Python'))